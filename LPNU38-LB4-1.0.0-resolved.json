{
  "openapi": "3.0.1",
  "info": {
    "title": "Swagger AdService",
    "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/LPNU38/LB4/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "tags": [
    {
      "name": "ad",
      "description": "Everything about your ads"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/ad": {
      "post": {
        "tags": [
          "ad"
        ],
        "summary": "add a new ad ",
        "operationId": "addad",
        "requestBody": {
          "description": "ad object that needs to be added ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ad"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully",
            "content": {}
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/ad/findByStatus": {
      "get": {
        "tags": [
          "ad"
        ],
        "summary": "Finds ads by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findAdsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "default": "public",
                "enum": [
                  "local",
                  "public"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ad"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/ad/{adId}": {
      "get": {
        "tags": [
          "ad"
        ],
        "summary": "Find ad by ID",
        "description": "Returns a single ad",
        "operationId": "getAdById",
        "parameters": [
          {
            "name": "adId",
            "in": "path",
            "description": "ID of ad to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ad"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "ad"
        ],
        "summary": "Update an existing ad",
        "operationId": "updatead",
        "parameters": [
          {
            "name": "adId",
            "in": "path",
            "description": "Advertisement that need to be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ad object that needs to be added ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ad"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ad"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "ad not found",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "ad"
        ],
        "summary": "Deletes a ad",
        "operationId": "deleteAd",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adId",
            "in": "path",
            "description": "Ad id to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ad"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Ad not found",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/authentication/register": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UserToCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation. User is registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserToCreate"
                }
              }
            }
          },
          "400": {
            "description": "User with such username already exists"
          }
        }
      }
    },
    "/authentication/login": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Logs in user",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The username",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The user's password (plain text)",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation."
          },
          "401": {
            "description": "Provided credentials are invalid"
          }
        }
      }
    },
    "/authentication/logout": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Logs out current logged in user",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Authentication information is missing or invalid",
            "headers": {
              "WWW_Authenticate": {
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserToGet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserToGet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Location"
        }
      },
      "Ad": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "user_id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "text": {
            "type": "string"
          },
          "PublishingDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "ad status in the service",
            "enum": [
              "local",
              "public"
            ]
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "xml": {
          "name": "ad"
        }
      },
      "UserToGet": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "UserToCreate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "xml": {
          "name": "User"
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication information is missing or invalid",
        "headers": {
          "WWW_Authenticate": {
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "InvalidCredentialsError": {
        "description": "Provided credentials are invalid"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}